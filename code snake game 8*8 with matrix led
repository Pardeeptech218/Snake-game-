#include <LedControl.h>

#define DIN 11
#define CLK 13
#define CS 10

#define VRx A0
#define VRy A1
#define SW 2
#define BUZZER 3

LedControl lc = LedControl(DIN, CLK, CS, 1);

int snakeX[64], snakeY[64];
int length = 1;
int dirX = 1, dirY = 0;

int foodX = 4, foodY = 4;
unsigned long lastMove = 0;
int moveDelayStart = 300;
int moveDelay = moveDelayStart;

bool gameOver = false;
int score = 0;

void setup() {
  Serial.begin(9600);
  lc.shutdown(0, false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);

  pinMode(BUZZER, OUTPUT);
  pinMode(SW, INPUT_PULLUP);

  randomSeed(analogRead(A3));

  showMessage("START");
  resetGame();
  Serial.println("Game Started! Use joystick to move.");
  Serial.println("Press joystick button to restart after Game Over.");
}

void loop() {
  if (gameOver) {
    if (digitalRead(SW) == LOW) {
      showMessage("START");
      resetGame();
    }
    return;
  }

  readJoystick();

  if (millis() - lastMove > moveDelay) {
    if (!moveSnake()) {
      gameOver = true;
      tone(BUZZER, 200, 1000);
      Serial.println("GAME OVER!");
      Serial.print("Final Score: ");
      Serial.println(score);
      showMessage("OVER");
    }
    lastMove = millis();
  }
}

void resetGame() {
  lc.clearDisplay(0);
  length = 1;
  dirX = 1;
  dirY = 0;
  snakeX[0] = 0;
  snakeY[0] = 0;
  score = 0;
  moveDelay = moveDelayStart;
  gameOver = false;
  placeFood();
}

void readJoystick() {
  int xVal = analogRead(VRx);
  int yVal = analogRead(VRy);

  if (xVal < 400 && dirX != 1) { dirX = -1; dirY = 0; }
  else if (xVal > 600 && dirX != -1) { dirX = 1; dirY = 0; }
  else if (yVal < 400 && dirY != 1) { dirX = 0; dirY = -1; }
  else if (yVal > 600 && dirY != -1) { dirX = 0; dirY = 1; }
}

bool moveSnake() {
  int newX = snakeX[0] + dirX;
  int newY = snakeY[0] + dirY;

  if (newX < 0) newX = 7;
  if (newX > 7) newX = 0;
  if (newY < 0) newY = 7;
  if (newY > 7) newY = 0;

  for (int i = 0; i < length; i++) {
    if (snakeX[i] == newX && snakeY[i] == newY) return false;
  }

  for (int i = length; i > 0; i--) {
    snakeX[i] = snakeX[i - 1];
    snakeY[i] = snakeY[i - 1];
  }

  snakeX[0] = newX;
  snakeY[0] = newY;

  if (newX == foodX && newY == foodY) {
    length++;
    score++;
    tone(BUZZER, 1000, 150);
    placeFood();
    if (moveDelay > 100) moveDelay -= 10;
    Serial.print("Score: ");
    Serial.println(score);
  }

  drawSnake();
  return true;
}

void drawSnake() {
  lc.clearDisplay(0);
  lc.setLed(0, foodY, foodX, true);
  for (int i = 0; i < length; i++) {
    lc.setLed(0, snakeY[i], snakeX[i], true);
  }
}

void placeFood() {
  bool valid;
  do {
    valid = true;
    foodX = random(0, 8);
    foodY = random(0, 8);
    for (int i = 0; i < length; i++) {
      if (snakeX[i] == foodX && snakeY[i] == foodY) {
        valid = false;
        break;
      }
    }
  } while (!valid);
}

void showMessage(const char* msg) {
  // Simple 5x7 font for letters S T A R O V E
  // Each letter is 5 columns wide, 7 bits tall.
  // We will scroll message left, one column at a time.

  // Letters bitmaps (5 columns each)
  // Each byte is one column (bits bottom-to-top)
  const byte letters[][5] = {
    // S
    {B0111110, B0100001, B0100001, B0100001, B0011110},
    // T
    {B0000001, B0000001, B0111111, B0000001, B0000001},
    // A
    {B0111110, B0001001, B0001001, B0001001, B0111110},
    // R
    {B0111111, B0001001, B0011001, B0101001, B1000110},
    // O
    {B0011110, B0100001, B0100001, B0100001, B0011110},
    // V
    {B0011111, B0100000, B0100000, B0100000, B0011111},
    // E
    {B0111111, B0100101, B0100101, B0100101, B0100001},
  };

  // Map letters to indexes: S T A R / O V E
  const char alphabet[] = "STAROVE";

  int len = strlen(msg);
  // Compose message as column stream
  byte msgCols[5 * len];
  int totalCols = 5 * len;

  for (int i = 0; i < len; i++) {
    char c = toupper(msg[i]);
    int idx = -1;
    for (int j = 0; j < 7; j++) {
      if (alphabet[j] == c) {
        idx = j;
        break;
      }
    }
    if (idx == -1) {
      // unknown char â†’ blank 5 columns
      for (int col = 0; col < 5; col++) msgCols[i * 5 + col] = 0;
    } else {
      for (int col = 0; col < 5; col++) {
        msgCols[i * 5 + col] = letters[idx][col];
      }
    }
  }

  // Scroll message left on matrix
  for (int pos = 0; pos < totalCols + 8; pos++) {
    lc.clearDisplay(0);
    for (int col = 0; col < 8; col++) {
      int msgColIndex = pos + col - 8;
      if (msgColIndex >= 0 && msgColIndex < totalCols) {
        byte column = msgCols[msgColIndex];
        // Draw bits vertically on matrix col (row 0 bottom)
        for (int row = 0; row < 7; row++) {
          if (bitRead(column, row)) {
            lc.setLed(0, 7 - row, col, true);
          }
        }
      }
    }
    delay(120);
  }
}
